# This is the specfile for the Buchschloss configuration file
# It includes all needed keys (and defaults, if applicable)

debug = boolean(default=false)


# configuration for the core program
[core]

    # the location of the database file
    database name = file(default='buchschloss.sqlite')

    # iterations for PBKDF2. To make the hashes stronger (or faster) later,
    # insert the preferred number at the beginning. older hashes will automatically be updated at login
    hash iterations = int_list

    # Salt length for hashes in bytes. If it is changed,
    # the new length will be applied every time a password is changed
    salt length = integer(min=0)

    # the format dates are displayed in, see https://docs.python.org/3/library/datetime.html#datetime.date.strftime
    date format = string(default='%Y-%m-%d')

    # number of latest borrowers to save
    save latest borrowers = integer(min=0, default=10)

    # how long different levels may borrow books for
    # the key is the level, the value the max. number of weeks
    # a book may be borrowed for
    # lower values for higher levels will be trimmed
    [[borrow time limit]]
        __many__ = integer(min=0, default=0)

    [[log]]
        # the location of the log file
        # will be created if it does not exist
        # empty to log to STDOUT
        file = string(default='buchschloss.log')

        # the minimum log level to log
        level = option('DEBUG', 'INFO', 'WARNING', 'ERROR', default='INFO')

        [[[rotate]]]
            # optional rotation
            # not available when logging to STDOUT
            how = option('none', 'size', 'time', default='none')

            # rotation value:
            # size in KiB if rotate is size
            size = integer(min=1, default=1)
            # interval if rotate is time
            interval unit = option('S', 'M', 'H', 'D', default='D')
            interval value = integer(min=1, default=7)

            # maximum number of old copies to store
            copy count = integer(min=1, default=5)

    # required levels for actions
    # levels can range from 0 to 10, with lower values having less privilege
    # names for used level names should be assigned level names in the namefile
    # view level also applies to search by default
    # new level also applies to edit by default
    [[required levels]]
        [[[Book]]]
            new = level_number(default=2)
            view = level_number(default=0)
            edit = level_number(default=None)
            search = level_number(default=None)
        [[[Person]]]
            new = level_number(default=3)
            view = level_number(default=1)
            edit = level_number(default=None)
            search = level_number(default=None)
        [[[Library]]]
            new = level_number(default=3)
            view = level_number(default=0)
            edit = level_number(default=None)
            search = level_number(default=None)
        [[[Group]]]
            new = level_number(default=3)
            view = level_number(default=0)
            edit = level_number(default=None)
            search = level_number(default=None)
            # default: Book.edit
            activate = level_number(default=None)
        [[[Borrow]]]
            # new is determined by borrow time (see above)
            # override borrow permission checks; default Person.edit
            # note someone with Person.edit can change the checked parameters anyway
            override = level_number(default=None)
            view = level_number(default=1)
            restitute = level_number(default=1)
            search = level_number(default=None)
        [[[Member]]]
            new = level_number(default=4)
            view = level_number(default=4)
            edit = level_number(default=None)
            search = level_number(default=None)
            # passwords can always be changed by the owner
            # this level applies to other people changing someone's password
            # default: Member.edit
            change password = level_number(default=None)


# configuration for utilities
[utils]

    # tasks can be performed one on startup or in a fixed interval
    # valid tasks are:
    #   - backup: local backups by copying the database
    #   - web_backup: remote backups with ftp
    #   - late_books: checks for late books
    [[tasks]]
        # recurring tasks
        recurring = task_list(default=list())
        # time between recurring tasks as <days>[:<hours>[:<minutes>]]
        repeat every = timedelta(default=1)
        # startup tasks
        startup = task_list(default=list())

        # how much time before a book must be returned before warning in late_books
        late books warn time = timedelta(default=3)

        # how many copies to retain (local/remote)
        backup depth = integer(min=1, default=1)
        web backup depth = integer(min=1, default=1)

        # key for backup encryption
        # must be 32 bytes, encoded in base64
        # backups will not be encrypted if not specified
        secret key = base64bytes(32, default=None)

    # for remote backups, FTP can be used
    # TODO: can I make sections optional?
    [[ftp]]
        # self-explaining
        host = string(default='')
        username = string(default='')
        password = string(default='')
        tls = boolean(default=None)

    # HTTP can be used as well
    # TODO: make optional too?
    [[http]]
        # including protocol (https://)
        url = string(default='')
        # file name to use when uploading
        file name = string(default='')
        # HTTP Basic authentication can be used
        [[[Basic authentication]]]
            username = string(default='')
            password = string(default='')
        # or authentication via POST parameters
        [[[POST authentication]]]
           username = string(default='')
           password = string(default='')

    # when errors occur, emails can be sent
    [[email]]
        # who has to deal with errors
        recipient = string
        # From: header
        from = string
        [[[smtp]]]
            host = string
            port = integer(1, 65535)
            username = string(default=None)
            password = string(default=None)
            tls = boolean(default=true)

    # for end-user messages
    [[names]]
        format = option('json', 'configobj')
        file = file


# User Interface configuration
# ============================
# the following blocks deal with UI config. You may put common subsections
# into a special top-level [ui] section. The values will be merged into every
# individual UI section

# configuration for the cli user interface
[cli]
    [[answers]]
        # which answers will be interpreted as "yes" (lower case)
        yes = list(default=list('y', 'yes', 'ok'))
        # and as "no" (also lower case)
        no = list(default=list('n', 'no'))
    [[intro]]
        text = string(default=None)

# configuration for the gui2 user interface
[gui2]
    # how many items to display in a selection popup
    popup height = integer(min=1, default=10)

    # shown on start
    [[intro]]
        # default: Buchschloss\n\nhttps://github.com/mik2k2/buchschloss
        text = string(default=None)
        font = string(default='Times 70')

    # default values for entry widgets
    # are given as follows:
    # NOTE: underscores in field names must be used here!
    # [[entry defaults]]
        # [[[form name 1]]]  e.g. [[[Person]]]
            # key1 = value1  e.g. max_borrow = 3
            # key2 = value2  e.g. libraries = main
            # etc.
        # [[[form name 2]]]  e.g. [[[Book]]]
            # key1 = value1  e.g. medium = book
            # key2 = value2  e.g. library = main
            # etc.
        # etc.
    [[entry defaults]]
        [[[__many__]]]
            __many__ = string

    # autocompletion for entry widgets
    # give as follows:
    # NOTE: underscores in field names must be used here
    # [[autocomplete]]
        # [[[form name 1]]]  e.g. [[[Book]]]
            # [[[[field name 1]]]]  e.g. concerned_people
                # key1 = value1  e.g. i = llustrator
                # key2 = value 2  e.g. t = ranslator
                # etc.
            # [[[[field name 2]]]]
                # key1 = value1
                # key2 = value2
                # etc.
            # etc.
    [[autocomplete]]
        [[[__many__]]]
            [[[[__many__]]]]
                __many__ = string

    # font for normal use
    [[font]]
        family = string
        size = integer(min=1)


    [[widget size]]
        # search results, info
        [[[main]]]
            height = integer(min=1)
            width = integer(min=1)
