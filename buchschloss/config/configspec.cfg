# This is the specfile for the Buchschloss configuration file
# It includes all needed keys (and defaults, if applicable)

debug = boolean(default=false)


# configuration for the core program
[core]

    # the location of the database file
    database name = file(default='buchschloss.sqlite')

    # iterations for PBKDF2. To make the hashes stronger (or faster) later,
    # insert the preferred number at the beginning. older hashes will automatically be updated at login
    hash iterations = int_list

    # Salt length for hashes in bytes. If it is changed,
    # the new length will be applied every time a password is changed
    salt length = integer(min=0)

    # the format dates are displayed in, see https://docs.python.org/3/library/datetime.html#datetime.date.strftime
    date format = string(default='%Y-%m-%d')

    # number of latest borrowers to save
    save latest borrowers = integer(min=0, default=10)

    # how long different levels may borrow books for
    # the index is the level, the value the max. number of weeks
    # a book may be borrowed for
    borrow time limit = int_list(min=5, max=5, default=list(0, 5, 7, 10, 20))

    [[log]]
        # the location of the log file
        # will be created if it does not exist
        # empty to log to STDOUT
        file = string(default='buchschloss.log')

        # the minimum log level to log
        level = option('DEBUG', 'INFO', 'WARNING', 'ERROR', default='INFO')

        [[[rotate]]]
            # optional rotation
            # not available when logging to STDOUT
            how = option('none', 'size', 'time', default='none')

            # rotation value:
            # size in KiB if rotate is size
            size = integer(min=1, default=1)
            # interval if rotate is time
            interval unit = option('S', 'M', 'H', 'D', default='D')
            interval value = integer(min=1, default=7)

            # maximum number of old copies to store
            copy count = integer(min=1, default=5)


# configuration for utilities
[utils]
    # scripts that will be used to get book data based on ISBN
    # later scripts may override values from earlier scripts
    # the database is automatically queried and overrides script data
    book data scripts = script_spec(default=list())
    # when errors occur, emails can be sent
    [[email]]
        # who has to deal with errors
        recipient = string
        # From: header
        from = string
        [[[smtp]]]
            host = string
            port = integer(1, 65535)
            username = string(default=None)
            password = string(default=None)
            tls = boolean(default=true)

    # for end-user messages
    [[names]]
        format = option('json', 'configobj')
        file = file

# scripts can be invoked at different times for different reasons
# a script is specified as "<name>[!<type>]", like "leseclub!cli2"
# scripts are cli2 scripts by default, so the above is equivalent to "leseclub"
# the other script type is a Python script (!py).
# The only Python scripts are the backup scripts "local_backup" and "http_backup"
[scripts]

    # startup scripts are run once on every startup
    startup = script_spec(default=list())

    # repeating scripts are run periodically
    # the time in <days>[:<hours>[:<minutes>]] is given following a '@' symbol
    repeating = script_spec(with_time=True, default=list())

    # configuration for Python scripts
    [[python]]
        [[[local_backup]]]
            # maximum number of copies
            depth = integer(min=1, default=1)

            # key for backup encryption
            # must be 32 bytes, encoded in base64
            # backups will not be encrypted if not specified
            secret key = base64bytes(32, default=None)

        [[[http_backup]]]
            # maximum number of copies
            depth = integer(min=1, default=1)

            # same as for local backups
            secret key = base64bytes(32, default=None)

            # config for the actual HTTP request
            [[[[http]]]]
                # including protocol (https://)
                url = string(default='')
                # file name to use when uploading
                file name = string(default='')
                # HTTP Basic authentication can be used
                [[[[[Basic authentication]]]]]
                    username = string(default='')
                    password = string(default='')
                # or authentication via POST parameters
                # or some other POST parameters...
                [[[[[POST authentication]]]]]
                   __many__ = string(default='')

    # configuration data for cli2 scripts
    [[cli2]]
        # see used scripts for the configuration format
        [[[__many__]]]
            __many__ = string


# User Interface configuration
# ============================
# the following blocks deal with UI config. You may put common subsections
# into a special top-level [ui] section. The values will be merged into every
# individual UI section

# configuration for the cli user interface
[cli]
    [[answers]]
        # which answers will be interpreted as "yes" (lower case)
        yes = list(default=list('y', 'yes', 'ok'))
        # and as "no" (also lower case)
        no = list(default=list('n', 'no'))
    [[intro]]
        text = string(default=None)

# configuration for the gui2 user interface
[gui2]
    # how many items to display in a selection popup
    popup height = integer(min=1, default=10)

    # shown on start
    [[intro]]
        # default: Buchschloss\n\nhttps://github.com/mik2k2/buchschloss
        text = string(default=None)
        font = string(default='Times 70')

    # register script actions
    # give them as action name = script spec
    # optionally include a section to group them together
    # see the [scripts] section on script specs
    [[script actions]]
        ___many___ = script_spec(single=True)
        [[[__many__]]]
            __many__ = script_spec(single=True)

    # default values for entry widgets
    # are given as follows:
    # NOTE: underscores in field names must be used here!
    # [[entry defaults]]
        # [[[form name 1]]]  e.g. [[[Person]]]
            # key1 = value1  e.g. max_borrow = 3
            # key2 = value2  e.g. libraries = main
            # etc.
        # [[[form name 2]]]  e.g. [[[Book]]]
            # key1 = value1  e.g. medium = book
            # key2 = value2  e.g. library = main
            # etc.
        # etc.
    [[entry defaults]]
        [[[__many__]]]
            __many__ = string

    # autocompletion for entry widgets
    # give as follows:
    # NOTE: underscores in field names must be used here
    # [[autocomplete]]
        # [[[form name 1]]]  e.g. [[[Book]]]
            # [[[[field name 1]]]]  e.g. concerned_people
                # key1 = value1  e.g. i = llustrator
                # key2 = value 2  e.g. t = ranslator
                # etc.
            # [[[[field name 2]]]]
                # key1 = value1
                # key2 = value2
                # etc.
            # etc.
    [[autocomplete]]
        [[[__many__]]]
            [[[[__many__]]]]
                __many__ = string

    # font for normal use
    [[font]]
        family = string
        size = integer(min=1)

    [[widget size]]
        # search results, info
        [[[main]]]
            height = integer(min=1)
            width = integer(min=1)

[cli2]
    # configuration for REQUESTS permission
    [[requests]]
        # yes, this is a bit stupid
        methods = optionlist('get', default=list('get'))
        # don't forget to escape dots when allowing a specific domain
        url regex = regex(default='^https?://((?!_)[-\w.])+/')
    # Lua builtins whitelist
    [[whitelist]]
        __many__ = string
        [[[___many___]]]
            __many__ = string
